
As part of the first steps in the project plan, my intial proposal were to acheive
the following specific goals:
( These goals are listed also with respect using the current implementation of
density operators at this branch:    )

1. Start with density.py. Make if work with different bases by aligning the
current implementation with representation logic.
2. Update TensorProduct.py for multi-qubit states
3. Come up with an proposal/implementation for density matrices specific to
qubits.

The above tasks currently has been planned for the first 4 weeks of the project.
For the above tasks, I will provide 2 sections in this blog. In the first
section, I describe my understanding of what is needed(kind of list of
requirements, and then propose the implementation idea).

What is currently available in Density.py? ( from Brian Granger's git branch)

Currently, density.py has the basic functions prototypes. The current density
object accepts any kind of input. That is there is not restriction of objects to
be strictly of type 'State' or 'Ket'.

Also, when we use Qubit's as argument to the density object, what gets printed
in not accurate. For example,


The doit() method and represent() method produce errors currently.

Next steps for density.py

a. Implement eval() function to validate the arguments passed to the
constructor. Only instances of type 'State' will be accepted. If any QExpr is
passed as argument, then QExpr will have to be simplified and checked if final
QExpr object is an instance of type 'State'.

Alternatively, we could just check if passed states are of type 'Ket'.

This steps takes care of creation of density matrices.

b. doit() : The current implementation currently errors out. We will work on
this to fix it.

c. _represent(): The current implementation errors out. Also, the current
implementation expands the density operator (thus producing the matrix) before
the original represent() method is invoked. The approach, we plan to take is
call the represent method for each of the states in the density op.

Say,  Density([ ket1,p1 ] , [ket2, p2], [ket3,p3] ), then would way do do change
of basis using represent would be to do the following:

_represent(self, **options)
  states = []
  for each state in density matrix
    states.append(represent(state, **options)
    

d. Add test cases. Ofcourse, this step will be step 0


My next blog post will have similar structure of discussion for the next 2
topics. My hope is by end of this week, these details are ironed out enough so
that I can exactly say what I will deliver at end of each of the first 4 weeks.


P.S: I plan to provide detailed plan for remaining tasks as we approach the
timelines when they have to be worked on.









